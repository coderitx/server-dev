// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cloud.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudService_AddRepositoryPool_FullMethodName     = "/pb.CloudService/AddRepositoryPool"
	CloudService_UpdateRepositoryPool_FullMethodName  = "/pb.CloudService/UpdateRepositoryPool"
	CloudService_DelRepositoryPool_FullMethodName     = "/pb.CloudService/DelRepositoryPool"
	CloudService_GetRepositoryPoolById_FullMethodName = "/pb.CloudService/GetRepositoryPoolById"
	CloudService_SearchRepositoryPool_FullMethodName  = "/pb.CloudService/SearchRepositoryPool"
	CloudService_AddShareBasic_FullMethodName         = "/pb.CloudService/AddShareBasic"
	CloudService_UpdateShareBasic_FullMethodName      = "/pb.CloudService/UpdateShareBasic"
	CloudService_DelShareBasic_FullMethodName         = "/pb.CloudService/DelShareBasic"
	CloudService_GetShareBasicById_FullMethodName     = "/pb.CloudService/GetShareBasicById"
	CloudService_SearchShareBasic_FullMethodName      = "/pb.CloudService/SearchShareBasic"
	CloudService_AddUserBasic_FullMethodName          = "/pb.CloudService/AddUserBasic"
	CloudService_UpdateUserBasic_FullMethodName       = "/pb.CloudService/UpdateUserBasic"
	CloudService_DelUserBasic_FullMethodName          = "/pb.CloudService/DelUserBasic"
	CloudService_GetUserBasicById_FullMethodName      = "/pb.CloudService/GetUserBasicById"
	CloudService_SearchUserBasic_FullMethodName       = "/pb.CloudService/SearchUserBasic"
	CloudService_AddUserRepository_FullMethodName     = "/pb.CloudService/AddUserRepository"
	CloudService_UpdateUserRepository_FullMethodName  = "/pb.CloudService/UpdateUserRepository"
	CloudService_DelUserRepository_FullMethodName     = "/pb.CloudService/DelUserRepository"
	CloudService_GetUserRepositoryById_FullMethodName = "/pb.CloudService/GetUserRepositoryById"
	CloudService_SearchUserRepository_FullMethodName  = "/pb.CloudService/SearchUserRepository"
)

// CloudServiceClient is the client API for CloudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudServiceClient interface {
	// -----------------------repositoryPool-----------------------
	AddRepositoryPool(ctx context.Context, in *AddRepositoryPoolReq, opts ...grpc.CallOption) (*AddRepositoryPoolResp, error)
	UpdateRepositoryPool(ctx context.Context, in *UpdateRepositoryPoolReq, opts ...grpc.CallOption) (*UpdateRepositoryPoolResp, error)
	DelRepositoryPool(ctx context.Context, in *DelRepositoryPoolReq, opts ...grpc.CallOption) (*DelRepositoryPoolResp, error)
	GetRepositoryPoolById(ctx context.Context, in *GetRepositoryPoolByIdReq, opts ...grpc.CallOption) (*GetRepositoryPoolByIdResp, error)
	SearchRepositoryPool(ctx context.Context, in *SearchRepositoryPoolReq, opts ...grpc.CallOption) (*SearchRepositoryPoolResp, error)
	// -----------------------shareBasic-----------------------
	AddShareBasic(ctx context.Context, in *AddShareBasicReq, opts ...grpc.CallOption) (*AddShareBasicResp, error)
	UpdateShareBasic(ctx context.Context, in *UpdateShareBasicReq, opts ...grpc.CallOption) (*UpdateShareBasicResp, error)
	DelShareBasic(ctx context.Context, in *DelShareBasicReq, opts ...grpc.CallOption) (*DelShareBasicResp, error)
	GetShareBasicById(ctx context.Context, in *GetShareBasicByIdReq, opts ...grpc.CallOption) (*GetShareBasicByIdResp, error)
	SearchShareBasic(ctx context.Context, in *SearchShareBasicReq, opts ...grpc.CallOption) (*SearchShareBasicResp, error)
	// -----------------------userBasic-----------------------
	AddUserBasic(ctx context.Context, in *AddUserBasicReq, opts ...grpc.CallOption) (*AddUserBasicResp, error)
	UpdateUserBasic(ctx context.Context, in *UpdateUserBasicReq, opts ...grpc.CallOption) (*UpdateUserBasicResp, error)
	DelUserBasic(ctx context.Context, in *DelUserBasicReq, opts ...grpc.CallOption) (*DelUserBasicResp, error)
	GetUserBasicById(ctx context.Context, in *GetUserBasicByIdReq, opts ...grpc.CallOption) (*GetUserBasicByIdResp, error)
	SearchUserBasic(ctx context.Context, in *SearchUserBasicReq, opts ...grpc.CallOption) (*SearchUserBasicResp, error)
	// -----------------------userRepository-----------------------
	AddUserRepository(ctx context.Context, in *AddUserRepositoryReq, opts ...grpc.CallOption) (*AddUserRepositoryResp, error)
	UpdateUserRepository(ctx context.Context, in *UpdateUserRepositoryReq, opts ...grpc.CallOption) (*UpdateUserRepositoryResp, error)
	DelUserRepository(ctx context.Context, in *DelUserRepositoryReq, opts ...grpc.CallOption) (*DelUserRepositoryResp, error)
	GetUserRepositoryById(ctx context.Context, in *GetUserRepositoryByIdReq, opts ...grpc.CallOption) (*GetUserRepositoryByIdResp, error)
	SearchUserRepository(ctx context.Context, in *SearchUserRepositoryReq, opts ...grpc.CallOption) (*SearchUserRepositoryResp, error)
}

type cloudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudServiceClient(cc grpc.ClientConnInterface) CloudServiceClient {
	return &cloudServiceClient{cc}
}

func (c *cloudServiceClient) AddRepositoryPool(ctx context.Context, in *AddRepositoryPoolReq, opts ...grpc.CallOption) (*AddRepositoryPoolResp, error) {
	out := new(AddRepositoryPoolResp)
	err := c.cc.Invoke(ctx, CloudService_AddRepositoryPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateRepositoryPool(ctx context.Context, in *UpdateRepositoryPoolReq, opts ...grpc.CallOption) (*UpdateRepositoryPoolResp, error) {
	out := new(UpdateRepositoryPoolResp)
	err := c.cc.Invoke(ctx, CloudService_UpdateRepositoryPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DelRepositoryPool(ctx context.Context, in *DelRepositoryPoolReq, opts ...grpc.CallOption) (*DelRepositoryPoolResp, error) {
	out := new(DelRepositoryPoolResp)
	err := c.cc.Invoke(ctx, CloudService_DelRepositoryPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetRepositoryPoolById(ctx context.Context, in *GetRepositoryPoolByIdReq, opts ...grpc.CallOption) (*GetRepositoryPoolByIdResp, error) {
	out := new(GetRepositoryPoolByIdResp)
	err := c.cc.Invoke(ctx, CloudService_GetRepositoryPoolById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) SearchRepositoryPool(ctx context.Context, in *SearchRepositoryPoolReq, opts ...grpc.CallOption) (*SearchRepositoryPoolResp, error) {
	out := new(SearchRepositoryPoolResp)
	err := c.cc.Invoke(ctx, CloudService_SearchRepositoryPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) AddShareBasic(ctx context.Context, in *AddShareBasicReq, opts ...grpc.CallOption) (*AddShareBasicResp, error) {
	out := new(AddShareBasicResp)
	err := c.cc.Invoke(ctx, CloudService_AddShareBasic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateShareBasic(ctx context.Context, in *UpdateShareBasicReq, opts ...grpc.CallOption) (*UpdateShareBasicResp, error) {
	out := new(UpdateShareBasicResp)
	err := c.cc.Invoke(ctx, CloudService_UpdateShareBasic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DelShareBasic(ctx context.Context, in *DelShareBasicReq, opts ...grpc.CallOption) (*DelShareBasicResp, error) {
	out := new(DelShareBasicResp)
	err := c.cc.Invoke(ctx, CloudService_DelShareBasic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetShareBasicById(ctx context.Context, in *GetShareBasicByIdReq, opts ...grpc.CallOption) (*GetShareBasicByIdResp, error) {
	out := new(GetShareBasicByIdResp)
	err := c.cc.Invoke(ctx, CloudService_GetShareBasicById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) SearchShareBasic(ctx context.Context, in *SearchShareBasicReq, opts ...grpc.CallOption) (*SearchShareBasicResp, error) {
	out := new(SearchShareBasicResp)
	err := c.cc.Invoke(ctx, CloudService_SearchShareBasic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) AddUserBasic(ctx context.Context, in *AddUserBasicReq, opts ...grpc.CallOption) (*AddUserBasicResp, error) {
	out := new(AddUserBasicResp)
	err := c.cc.Invoke(ctx, CloudService_AddUserBasic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateUserBasic(ctx context.Context, in *UpdateUserBasicReq, opts ...grpc.CallOption) (*UpdateUserBasicResp, error) {
	out := new(UpdateUserBasicResp)
	err := c.cc.Invoke(ctx, CloudService_UpdateUserBasic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DelUserBasic(ctx context.Context, in *DelUserBasicReq, opts ...grpc.CallOption) (*DelUserBasicResp, error) {
	out := new(DelUserBasicResp)
	err := c.cc.Invoke(ctx, CloudService_DelUserBasic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetUserBasicById(ctx context.Context, in *GetUserBasicByIdReq, opts ...grpc.CallOption) (*GetUserBasicByIdResp, error) {
	out := new(GetUserBasicByIdResp)
	err := c.cc.Invoke(ctx, CloudService_GetUserBasicById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) SearchUserBasic(ctx context.Context, in *SearchUserBasicReq, opts ...grpc.CallOption) (*SearchUserBasicResp, error) {
	out := new(SearchUserBasicResp)
	err := c.cc.Invoke(ctx, CloudService_SearchUserBasic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) AddUserRepository(ctx context.Context, in *AddUserRepositoryReq, opts ...grpc.CallOption) (*AddUserRepositoryResp, error) {
	out := new(AddUserRepositoryResp)
	err := c.cc.Invoke(ctx, CloudService_AddUserRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateUserRepository(ctx context.Context, in *UpdateUserRepositoryReq, opts ...grpc.CallOption) (*UpdateUserRepositoryResp, error) {
	out := new(UpdateUserRepositoryResp)
	err := c.cc.Invoke(ctx, CloudService_UpdateUserRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DelUserRepository(ctx context.Context, in *DelUserRepositoryReq, opts ...grpc.CallOption) (*DelUserRepositoryResp, error) {
	out := new(DelUserRepositoryResp)
	err := c.cc.Invoke(ctx, CloudService_DelUserRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetUserRepositoryById(ctx context.Context, in *GetUserRepositoryByIdReq, opts ...grpc.CallOption) (*GetUserRepositoryByIdResp, error) {
	out := new(GetUserRepositoryByIdResp)
	err := c.cc.Invoke(ctx, CloudService_GetUserRepositoryById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) SearchUserRepository(ctx context.Context, in *SearchUserRepositoryReq, opts ...grpc.CallOption) (*SearchUserRepositoryResp, error) {
	out := new(SearchUserRepositoryResp)
	err := c.cc.Invoke(ctx, CloudService_SearchUserRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudServiceServer is the server API for CloudService service.
// All implementations must embed UnimplementedCloudServiceServer
// for forward compatibility
type CloudServiceServer interface {
	// -----------------------repositoryPool-----------------------
	AddRepositoryPool(context.Context, *AddRepositoryPoolReq) (*AddRepositoryPoolResp, error)
	UpdateRepositoryPool(context.Context, *UpdateRepositoryPoolReq) (*UpdateRepositoryPoolResp, error)
	DelRepositoryPool(context.Context, *DelRepositoryPoolReq) (*DelRepositoryPoolResp, error)
	GetRepositoryPoolById(context.Context, *GetRepositoryPoolByIdReq) (*GetRepositoryPoolByIdResp, error)
	SearchRepositoryPool(context.Context, *SearchRepositoryPoolReq) (*SearchRepositoryPoolResp, error)
	// -----------------------shareBasic-----------------------
	AddShareBasic(context.Context, *AddShareBasicReq) (*AddShareBasicResp, error)
	UpdateShareBasic(context.Context, *UpdateShareBasicReq) (*UpdateShareBasicResp, error)
	DelShareBasic(context.Context, *DelShareBasicReq) (*DelShareBasicResp, error)
	GetShareBasicById(context.Context, *GetShareBasicByIdReq) (*GetShareBasicByIdResp, error)
	SearchShareBasic(context.Context, *SearchShareBasicReq) (*SearchShareBasicResp, error)
	// -----------------------userBasic-----------------------
	AddUserBasic(context.Context, *AddUserBasicReq) (*AddUserBasicResp, error)
	UpdateUserBasic(context.Context, *UpdateUserBasicReq) (*UpdateUserBasicResp, error)
	DelUserBasic(context.Context, *DelUserBasicReq) (*DelUserBasicResp, error)
	GetUserBasicById(context.Context, *GetUserBasicByIdReq) (*GetUserBasicByIdResp, error)
	SearchUserBasic(context.Context, *SearchUserBasicReq) (*SearchUserBasicResp, error)
	// -----------------------userRepository-----------------------
	AddUserRepository(context.Context, *AddUserRepositoryReq) (*AddUserRepositoryResp, error)
	UpdateUserRepository(context.Context, *UpdateUserRepositoryReq) (*UpdateUserRepositoryResp, error)
	DelUserRepository(context.Context, *DelUserRepositoryReq) (*DelUserRepositoryResp, error)
	GetUserRepositoryById(context.Context, *GetUserRepositoryByIdReq) (*GetUserRepositoryByIdResp, error)
	SearchUserRepository(context.Context, *SearchUserRepositoryReq) (*SearchUserRepositoryResp, error)
	mustEmbedUnimplementedCloudServiceServer()
}

// UnimplementedCloudServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudServiceServer struct {
}

func (UnimplementedCloudServiceServer) AddRepositoryPool(context.Context, *AddRepositoryPoolReq) (*AddRepositoryPoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRepositoryPool not implemented")
}
func (UnimplementedCloudServiceServer) UpdateRepositoryPool(context.Context, *UpdateRepositoryPoolReq) (*UpdateRepositoryPoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepositoryPool not implemented")
}
func (UnimplementedCloudServiceServer) DelRepositoryPool(context.Context, *DelRepositoryPoolReq) (*DelRepositoryPoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRepositoryPool not implemented")
}
func (UnimplementedCloudServiceServer) GetRepositoryPoolById(context.Context, *GetRepositoryPoolByIdReq) (*GetRepositoryPoolByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryPoolById not implemented")
}
func (UnimplementedCloudServiceServer) SearchRepositoryPool(context.Context, *SearchRepositoryPoolReq) (*SearchRepositoryPoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRepositoryPool not implemented")
}
func (UnimplementedCloudServiceServer) AddShareBasic(context.Context, *AddShareBasicReq) (*AddShareBasicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShareBasic not implemented")
}
func (UnimplementedCloudServiceServer) UpdateShareBasic(context.Context, *UpdateShareBasicReq) (*UpdateShareBasicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShareBasic not implemented")
}
func (UnimplementedCloudServiceServer) DelShareBasic(context.Context, *DelShareBasicReq) (*DelShareBasicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelShareBasic not implemented")
}
func (UnimplementedCloudServiceServer) GetShareBasicById(context.Context, *GetShareBasicByIdReq) (*GetShareBasicByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShareBasicById not implemented")
}
func (UnimplementedCloudServiceServer) SearchShareBasic(context.Context, *SearchShareBasicReq) (*SearchShareBasicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchShareBasic not implemented")
}
func (UnimplementedCloudServiceServer) AddUserBasic(context.Context, *AddUserBasicReq) (*AddUserBasicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserBasic not implemented")
}
func (UnimplementedCloudServiceServer) UpdateUserBasic(context.Context, *UpdateUserBasicReq) (*UpdateUserBasicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBasic not implemented")
}
func (UnimplementedCloudServiceServer) DelUserBasic(context.Context, *DelUserBasicReq) (*DelUserBasicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserBasic not implemented")
}
func (UnimplementedCloudServiceServer) GetUserBasicById(context.Context, *GetUserBasicByIdReq) (*GetUserBasicByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBasicById not implemented")
}
func (UnimplementedCloudServiceServer) SearchUserBasic(context.Context, *SearchUserBasicReq) (*SearchUserBasicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserBasic not implemented")
}
func (UnimplementedCloudServiceServer) AddUserRepository(context.Context, *AddUserRepositoryReq) (*AddUserRepositoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserRepository not implemented")
}
func (UnimplementedCloudServiceServer) UpdateUserRepository(context.Context, *UpdateUserRepositoryReq) (*UpdateUserRepositoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRepository not implemented")
}
func (UnimplementedCloudServiceServer) DelUserRepository(context.Context, *DelUserRepositoryReq) (*DelUserRepositoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserRepository not implemented")
}
func (UnimplementedCloudServiceServer) GetUserRepositoryById(context.Context, *GetUserRepositoryByIdReq) (*GetUserRepositoryByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRepositoryById not implemented")
}
func (UnimplementedCloudServiceServer) SearchUserRepository(context.Context, *SearchUserRepositoryReq) (*SearchUserRepositoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserRepository not implemented")
}
func (UnimplementedCloudServiceServer) mustEmbedUnimplementedCloudServiceServer() {}

// UnsafeCloudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudServiceServer will
// result in compilation errors.
type UnsafeCloudServiceServer interface {
	mustEmbedUnimplementedCloudServiceServer()
}

func RegisterCloudServiceServer(s grpc.ServiceRegistrar, srv CloudServiceServer) {
	s.RegisterService(&CloudService_ServiceDesc, srv)
}

func _CloudService_AddRepositoryPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRepositoryPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).AddRepositoryPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_AddRepositoryPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).AddRepositoryPool(ctx, req.(*AddRepositoryPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateRepositoryPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepositoryPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateRepositoryPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_UpdateRepositoryPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateRepositoryPool(ctx, req.(*UpdateRepositoryPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DelRepositoryPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRepositoryPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DelRepositoryPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_DelRepositoryPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DelRepositoryPool(ctx, req.(*DelRepositoryPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetRepositoryPoolById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryPoolByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetRepositoryPoolById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_GetRepositoryPoolById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetRepositoryPoolById(ctx, req.(*GetRepositoryPoolByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_SearchRepositoryPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRepositoryPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).SearchRepositoryPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_SearchRepositoryPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).SearchRepositoryPool(ctx, req.(*SearchRepositoryPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_AddShareBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShareBasicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).AddShareBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_AddShareBasic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).AddShareBasic(ctx, req.(*AddShareBasicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateShareBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShareBasicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateShareBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_UpdateShareBasic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateShareBasic(ctx, req.(*UpdateShareBasicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DelShareBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelShareBasicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DelShareBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_DelShareBasic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DelShareBasic(ctx, req.(*DelShareBasicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetShareBasicById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShareBasicByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetShareBasicById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_GetShareBasicById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetShareBasicById(ctx, req.(*GetShareBasicByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_SearchShareBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchShareBasicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).SearchShareBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_SearchShareBasic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).SearchShareBasic(ctx, req.(*SearchShareBasicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_AddUserBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserBasicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).AddUserBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_AddUserBasic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).AddUserBasic(ctx, req.(*AddUserBasicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateUserBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserBasicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateUserBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_UpdateUserBasic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateUserBasic(ctx, req.(*UpdateUserBasicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DelUserBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserBasicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DelUserBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_DelUserBasic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DelUserBasic(ctx, req.(*DelUserBasicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetUserBasicById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBasicByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetUserBasicById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_GetUserBasicById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetUserBasicById(ctx, req.(*GetUserBasicByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_SearchUserBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserBasicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).SearchUserBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_SearchUserBasic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).SearchUserBasic(ctx, req.(*SearchUserBasicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_AddUserRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).AddUserRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_AddUserRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).AddUserRepository(ctx, req.(*AddUserRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateUserRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateUserRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_UpdateUserRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateUserRepository(ctx, req.(*UpdateUserRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DelUserRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DelUserRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_DelUserRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DelUserRepository(ctx, req.(*DelUserRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetUserRepositoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRepositoryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetUserRepositoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_GetUserRepositoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetUserRepositoryById(ctx, req.(*GetUserRepositoryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_SearchUserRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).SearchUserRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudService_SearchUserRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).SearchUserRepository(ctx, req.(*SearchUserRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudService_ServiceDesc is the grpc.ServiceDesc for CloudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CloudService",
	HandlerType: (*CloudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRepositoryPool",
			Handler:    _CloudService_AddRepositoryPool_Handler,
		},
		{
			MethodName: "UpdateRepositoryPool",
			Handler:    _CloudService_UpdateRepositoryPool_Handler,
		},
		{
			MethodName: "DelRepositoryPool",
			Handler:    _CloudService_DelRepositoryPool_Handler,
		},
		{
			MethodName: "GetRepositoryPoolById",
			Handler:    _CloudService_GetRepositoryPoolById_Handler,
		},
		{
			MethodName: "SearchRepositoryPool",
			Handler:    _CloudService_SearchRepositoryPool_Handler,
		},
		{
			MethodName: "AddShareBasic",
			Handler:    _CloudService_AddShareBasic_Handler,
		},
		{
			MethodName: "UpdateShareBasic",
			Handler:    _CloudService_UpdateShareBasic_Handler,
		},
		{
			MethodName: "DelShareBasic",
			Handler:    _CloudService_DelShareBasic_Handler,
		},
		{
			MethodName: "GetShareBasicById",
			Handler:    _CloudService_GetShareBasicById_Handler,
		},
		{
			MethodName: "SearchShareBasic",
			Handler:    _CloudService_SearchShareBasic_Handler,
		},
		{
			MethodName: "AddUserBasic",
			Handler:    _CloudService_AddUserBasic_Handler,
		},
		{
			MethodName: "UpdateUserBasic",
			Handler:    _CloudService_UpdateUserBasic_Handler,
		},
		{
			MethodName: "DelUserBasic",
			Handler:    _CloudService_DelUserBasic_Handler,
		},
		{
			MethodName: "GetUserBasicById",
			Handler:    _CloudService_GetUserBasicById_Handler,
		},
		{
			MethodName: "SearchUserBasic",
			Handler:    _CloudService_SearchUserBasic_Handler,
		},
		{
			MethodName: "AddUserRepository",
			Handler:    _CloudService_AddUserRepository_Handler,
		},
		{
			MethodName: "UpdateUserRepository",
			Handler:    _CloudService_UpdateUserRepository_Handler,
		},
		{
			MethodName: "DelUserRepository",
			Handler:    _CloudService_DelUserRepository_Handler,
		},
		{
			MethodName: "GetUserRepositoryById",
			Handler:    _CloudService_GetUserRepositoryById_Handler,
		},
		{
			MethodName: "SearchUserRepository",
			Handler:    _CloudService_SearchUserRepository_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud.proto",
}
